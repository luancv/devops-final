version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.1.3
  go: circleci/go@1.7.1
  
jobs:
  test-build:
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # run build
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install

      # run lint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  upload-docker:
    docker:
      - image: circleci/golang:1.15
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build docker container
          command: |
            docker build -t=$DOCKER_IMAGE_NAME:latest .
            docker image ls
      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            echo "logined"
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID
            echo "====tag === $CIRCLE_WORKFLOW_ID"
            docker login -u "$DOCKERHUB_USERNAME" -p "$DOCKERHUB_PASSWORD"
            docker push $DOCKER_IMAGE_NAME
            echo "====push ==="

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure management instances exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/management.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-management" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/management-parameters.json \
              --output text >> ~/checkIfDeployed.txt
            cat ~/checkIfDeployed.txt
      - run:
          name: Extract the IPs of the management instances for Ansible
          command: |
            echo [management] > ~/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - checkIfDeployed.txt
  build-docker-image:
    machine: true
    steps:
      - checkout
      - aws-ecr/build-and-push-image:
          repo: final-ecr
          tag: 'latest,${CIRCLE_WORKFLOW_ID:0:7}'
  deploy-kube:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update kube configuration
          command: |
            aws eks update-kubeconfig --region us-east-1 --name final-cluster
      - run:
          name: Deploy pods
          command: |
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.15/2022-10-31/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            kubectl version --short --client
            kubectl apply -f deployment/deployment.yml
            kubectl apply -f services/service.yml
            kubectl set image deployments/final final=631008802545.dkr.ecr.us-east-1.amazonaws.com/final-ecr:${CIRCLE_WORKFLOW_ID:0:7}
  



workflows:
  default:
    jobs:
      - test-build
      - upload-docker:
          requires:
            - test-build
          filters:
            branches:
              only: [ main ]
      - deploy-infrastructure:
          filters:
            branches:
              only: [ main ]
      - build-docker-image:
          requires:
            - deploy-infrastructure
      - deploy-kube:
          requires:
            - configure-infrastructure
            - upload-docker
